package com.n3lk;

import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import static java.nio.file.Files.move;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

 class AnimeSorter {

     private static final Logger LOGGER = Logger.getLogger( AnimeSorter.class.getName() );
    /**
     *  Moves files that begin with "[HorribleSubs]" and end with ".mkv"
     *  @param sourceDirectory The source directory of the files
     *  @param targetDirectory The target directory of the files
     *  @throws IOException If an input or output exception occurred
     *
     **/
    static void moveFiles(Path sourceDirectory, Path targetDirectory) throws IOException {

        //A pattern to match over each file
        String pattern = "**/[HorribleSubs]*.mkv";
        /**
         * Opens a directory, returning a DirectoryStream to iterate over the entries in the directory.
         * The elements returned by the directory stream's iterator are of type Path, each one representing an entry in the directory.
         * The entries returned by the iterator are filtered by matching the String representation of their file names against the given globbing pattern.
         *  @see <a href="https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob">What is glob</a> for more on glob pattern matching
         *  @param sourceDirectory Directory over which to iterate
         *  @param pattern A glob pattern to match over each file
         *  @return a new and open DirectoryStream object
         *  @throws IOException  Runtime exception thrown if an I/O error is encountered when iterating over the entries in a directory.
         *
         * **/
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(sourceDirectory, pattern)) {
            for (Path entry: stream) {
                System.out.println(entry.getFileName());
                String input = entry.getFileName().toString();
                File destFolder = new File( targetDirectory.toString() + '/' + entry.getFileName().toString().substring(input.indexOf(']')+2,input.lastIndexOf('-')-1));

                Path destPath = destFolder.toPath().resolve(entry.getFileName());

                try {
                    if(destFolder.mkdir()) {
                        System.out.println("Directory Created");
                    } else {
                        System.out.println("Directory is not created");
                    }
                    System.out.println(destPath);
                    move(entry,destPath, REPLACE_EXISTING);
                } catch (IOException ex) {
                    LOGGER.log( Level.SEVERE, ex.toString(), ex );
                    ex.printStackTrace();
                } LOGGER.fine("done");
            }
        } catch (DirectoryIteratorException ex) {
            // I/O error encountered during the files iteration. Retrieved as an IOException using the getCause() method.
            LOGGER.log( Level.SEVERE, ex.toString(), ex );
            throw ex.getCause();

        }

    }

    /*
always pass ex.toString() as the message here, because then when I "grep -n" for "Exception" in log files,
I can see the message too. Otherwise, it is going to be on the next line of output generated by the stack dump,
and you have to have a more advanced RegEx to match that line too, which often gets you more output than you need to look through.



    try {
    ...something that can throw an ignorable exception
} catch( Exception ex ) {
    LOGGER.log( Level.SEVERE, ex.toString(), ex );
}
    * logger.fine("doing stuff");
        try{
            Wombat.sneeze();
        } catch (Exception ex) {
            // Log the exception
            logger.log(Level.WARNING, "trouble sneezing", ex);
        }
        logger.fine("done");
    }
    * */


    public static void main(String[] args) {
        Path sourceDirectory = Paths.get("C:/Users/Nela/0/");
        Path targetDirectory = Paths.get("C:/Users/Nela/1/");

        try {
            moveFiles(sourceDirectory,targetDirectory);
        } catch (IOException ex) {
            LOGGER.log( Level.SEVERE, ex.toString(), ex );
            ex.printStackTrace();
        }
    }


}